---
# kamal_server_setup.yml
# Playbook to configure an Ubuntu server for Kamal 2

- name: Configure server for Kamal 2
  hosts: kamal_servers
  become: true
  vars:
    docker_compose_version: "2.24.5"
    username: "{{ ansible_user }}"
    architecture: "{{ ansible_architecture | default('amd64') }}"
    # Swap configuration
    configure_swap: "{{ configure_swap | default(true) }}"
    swap_file_path: "{{ swap_file_path | default('/swapfile') }}"
    swap_size_mb: "{{ swap_size_mb | default(2048) }}"

  tasks:
    - name: Update package cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install basic dependencies
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - python3-pip
          - git
          - ufw
          - fail2ban
        state: present

    - name: Add Docker official GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch={{ architecture }}] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present

    - name: Install Docker Engine
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present

    - name: Install Docker Compose
      get_url:
        url: "https://github.com/docker/compose/releases/download/v{{ docker_compose_version }}/docker-compose-linux-{{ architecture }}"
        dest: /usr/local/bin/docker-compose
        mode: "0755"
      register: docker_compose_download
      ignore_errors: yes

    - name: Install Docker Compose (fallback for ARM)
      get_url:
        url: "https://github.com/docker/compose/releases/download/v{{ docker_compose_version }}/docker-compose-linux-{{ architecture | regex_replace('arm.*', 'aarch64') }}"
        dest: /usr/local/bin/docker-compose
        mode: "0755"
      when:
        - docker_compose_download is failed
        - architecture is match("arm.*")

    - name: Add user to docker group
      user:
        name: "{{ username }}"
        groups: docker
        append: yes

    - name: Enable and start Docker service
      systemd:
        name: docker
        enabled: yes
        state: started

    - name: Configure firewall (UFW)
      ufw:
        rule: allow
        name: "{{ item }}"
      loop:
        - OpenSSH
        - "Nginx Full"

    - name: Ensure UFW allows HTTP and HTTPS connections
      ufw:
        rule: allow
        port: "{{ item }}"
        proto: tcp
      loop:
        - "80"
        - "443"

    - name: Enable UFW
      ufw:
        state: enabled
        policy: deny

    - name: Configure fail2ban
      copy:
        dest: /etc/fail2ban/jail.local
        content: |
          [DEFAULT]
          bantime = 3600
          findtime = 600
          maxretry = 5

          [sshd]
          enabled = true

    - name: Restart fail2ban
      systemd:
        name: fail2ban
        state: restarted
        enabled: yes

    - name: Install Kamal dependencies via pip
      pip:
        name:
          - docker
          - pyOpenSSL
        state: present

    - name: Ensure .ssh directory exists
      file:
        path: "/home/{{ username }}/.ssh"
        state: directory
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: "0700"
      when: username != "root"

    - name: Configure SSH keys for deployment
      authorized_key:
        user: "{{ username }}"
        state: present
        key: "{{ lookup('file', 'ssh_keys/deploy_key.pub') }}"
      when:
        - username != "root"
        - lookup('file', 'ssh_keys/deploy_key.pub', errors='ignore')

    - name: Create applications directory
      file:
        path: "/home/{{ username }}/apps"
        state: directory
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: "0755"
      when: username != "root"

    - name: Configure Swap
      block:
        - name: Check if swap file exists
          stat:
            path: "{{ swap_file_path }}"
          register: swap_file_check

        - name: Create swap file
          command: dd if=/dev/zero of={{ swap_file_path }} bs=1M count={{ swap_size_mb }}
          when: not swap_file_check.stat.exists

        - name: Set swap file permissions
          file:
            path: "{{ swap_file_path }}"
            mode: "0600"
          when: not swap_file_check.stat.exists

        - name: Format swap file
          command: mkswap {{ swap_file_path }}
          when: not swap_file_check.stat.exists

        - name: Enable swap
          command: swapon {{ swap_file_path }}
          when: not swap_file_check.stat.exists

        - name: Add swap to fstab
          lineinfile:
            path: /etc/fstab
            line: "{{ swap_file_path }} none swap sw 0 0"
            state: present
          when: not swap_file_check.stat.exists
      when: configure_swap | bool
